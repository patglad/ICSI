# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'icsi.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtWidgets
from PyQt5.QtGui import QIntValidator, QFont
from PyQt5.QtWidgets import QApplication, QFileDialog, QMainWindow, QWidget, QPushButton, QLabel, QLineEdit, QComboBox

import subprocess
import os


class Window(QMainWindow):

    def choose_weights(self):
        weights, _ = QFileDialog.getOpenFileName(self, 'Choose a weights file', '', 'Weights files | *.h5;')
        print(weights)
        return weights

    def choose_video(self):
        filePath, _ = QFileDialog.getOpenFileName(self, 'Choose a video file', '', 'Videos files | *.avi;')
        print(filePath)
        return filePath

    def start_detection_here(self):
        filePath = self.choose_video()
        weights = self.choose_weights()

        self.labelpath.setText('File: ' + filePath)

        command = r'python icsi.py splash --weights={} --video={}'.format(weights, filePath)
        print(command)
        subprocess.Popen(["start", "cmd", "/k", command], stdout=subprocess.PIPE, stderr=subprocess.PIPE,
                         shell=True, cwd=r'D:\MASK-RCNN\samples\icsi')

    def start_training_coco_here(self):
        epochs_input = int(self.epochs.text())
        steps_input = int(self.steps.text())
        imGPU_input = int(self.imGPU.currentText())
        layers_input = self.layers.currentText()
        dataset = str(QFileDialog.getExistingDirectory(self, "Select Directory"))
        weights = self.choose_weights()
        command = r'python icsi.py train --dataset={} --weights={} --epochs={} --steps={} --imGPU={} --layers={}'\
            .format(dataset, weights, epochs_input, steps_input, imGPU_input, layers_input)
        print(command)
        subprocess.Popen(["start", "cmd", "/k", command], stdout=subprocess.PIPE, stderr=subprocess.PIPE,
                         shell=True, cwd=r'D:\MASK-RCNN\samples\icsi')

    def see_film(self):
        os.system('python videowindow.py')


    def setupUi(self, ICSIWindow):
        ICSIWindow.setObjectName("ICSIWindow")
        ICSIWindow.resize(285, 318)
        ICSIWindow.setMaximumSize(285, 318)
        ICSIWindow.setStyleSheet("QMainWindow{\n"
                                 "background-image: url(:/nowyPrzedrostek/tlo.jpg);\n""}\n""")
        ICSIWindow.setWindowTitle("ICSI stage recognition software")
        #ICSIWindow.setWindowFlag(Qt.FramelessWindowHint) --> hides the bar

        self.centralwidget = QWidget(ICSIWindow)
        self.centralwidget.setObjectName("centralwidget")

        # Label displaying the file path of the chosen video
        self.labelpath = QLabel("Plik: ...", self.centralwidget)
        self.labelpath.setWordWrap(True)
        self.labelpath.setGeometry(20, 290, 800, 20)
        self.labelpath.setStyleSheet("color: black")


        ## Labels

        self.label = QtWidgets.QLabel("1. Trenowanie", self.centralwidget)
        self.label.setGeometry(QtCore.QRect(20, 0, 80, 21))
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel("Liczba epok:", self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(20, 30, 111, 21))
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel("Liczba kroków na epokę:", self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(20, 60, 141, 21))
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel("Liczba obrazów na GPU:", self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(20, 90, 131, 21))
        self.label_4.setObjectName("label_4")
        self.label_5 = QtWidgets.QLabel("Warstwy sieci:", self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(20, 120, 80, 21))
        self.label_5.setObjectName("label_5")
        self.label_6 = QtWidgets.QLabel("2. Detekcja", self.centralwidget)
        self.label_6.setGeometry(QtCore.QRect(20, 190, 80, 21))
        self.label_6.setObjectName("label_6")

        ## Input boxes

        self.epochs = QLineEdit(self.centralwidget)
        self.epochs.setObjectName("epochs")
        self.epochs.setGeometry(160, 30, 41, 21)
        self.epochs.setValidator(QIntValidator())

        self.steps = QLineEdit(self.centralwidget)
        self.steps.setObjectName("steps")
        self.steps.setGeometry(160, 60, 41, 21)
        self.steps.setValidator(QIntValidator())

        self.imGPU = QComboBox(self.centralwidget)
        self.imGPU.setObjectName("imGPU")
        self.imGPU.setGeometry(160, 90, 41, 21)
        self.imGPU.addItems(["1", "2"])

        self.layers = QComboBox(self.centralwidget)
        self.layers.setObjectName("layers")
        self.layers.setGeometry(160, 120, 69, 22)
        self.layers.addItems(["heads", "3+", "4+", "5+", "all"])

        ## Button to train

        self.train = QPushButton("Trenuj", self.centralwidget)
        self.train.clicked.connect(self.start_training_coco_here)
        self.train.setGeometry(20, 150, 91, 21)
        self.train.setFont(QFont('Times New Roman', 12))
        self.train.setStyleSheet("background-color:white;\n"
                                 "color: black;\n"
                                 "")

        ## Button to detect

        self.detection = QPushButton("Uruchom detekcję", self.centralwidget)
        self.detection.clicked.connect(self.start_detection_here)
        self.detection.setGeometry(20, 220, 120, 21)
        self.detection.setFont(QFont('Times New Roman', 12))
        self.detection.setStyleSheet("background-color:white;\n"
                                     "color: black;\n"
                                     "")

        ## Button to diplay film

        self.film = QPushButton("Zobacz film", self.centralwidget)
        self.film.clicked.connect(self.see_film)
        self.film.setGeometry(20, 250, 91, 21)
        self.film.setFont(QFont('Times New Roman', 12))
        self.film.setStyleSheet("background-color:white;\n"
                                     "color: black;\n"
                                     "")

        ## Button to exit

        self.exit = QPushButton("Wyjście", self.centralwidget)
        self.exit.clicked.connect(QApplication.instance().quit)
        self.exit.setGeometry(210, 290, 50, 20)
        self.train.setFont(QFont('Times New Roman', 12))
        self.exit.setStyleSheet("background-color:white;\n"
                                "color: black;")


        ICSIWindow.setCentralWidget(self.centralwidget)
        #self.menubar = QMenuBar(ICSIWindow)
        #self.menubar.setGeometry(0, 0, 960, 21)
        #self.menubar.setObjectName("menubar")
        #ICSIWindow.setMenuBar(self.menubar)
        #self.statusbar = QStatusBar(ICSIWindow)
        #self.statusbar.setObjectName("statusbar")
        #ICSIWindow.setStatusBar(self.statusbar)


#import images.tlo

if __name__ == "__main__":
    import sys

    app = QApplication(sys.argv)
    ICSIWindow = QtWidgets.QMainWindow()
    ui = Window()
    ui.setupUi(ICSIWindow)
    ICSIWindow.show()
    sys.exit(app.exec_())
